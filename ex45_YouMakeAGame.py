# Exercise 45: You Make A Game

"""函数的风格
 • 类里的函数成为「方法」(method)
 • 使用类的过程中，很多一部分时间用在告诉类如何「做事情」，因此可以将函数命名为一个动词，作为
   给类的一个命令。
     • 比如list的pop函数，相当于说：「嘿，列表，把这些东西弹出去。」它的名字不是
       remove_from_end_of_list，因为即使它的功能的确是这样，这一串字符也不是一个命令
 • 让函数保持简单小巧
"""


"""类的风格
 • 类使用「驼峰式大小写」(Camel case)，比如应使用SuperGoldFactory，而不是super_gold_factory
 • __init__不应该做太多的事情，会让类变得难以使用
 • 其他函数应该使用下划线分隔词，携程my_awesome_hair
 • 使用一致的方式组织函数的参数，比如：一个函数的参数是(dog, cat, user)，另一个是
   (user, cat, dog)，会让函数使用起来很困难
 • 不用使用来自模块的变量或全局变量
 • 不要一根筋式的维持风格一致性
"""


"""代码风格
 • 为了方便他人阅读，为自己的代码字符之间留下一些空白。因为人的眼睛和大脑会通过空白和垂直对齐的位置
   来扫描和区隔视觉元素，如果代码里没有任何空白，相当于为代码上了「迷彩装」。
 • 如果一段代码无法朗读出来，其可读性可能就有问题
 • 学着模仿别人的风格写Python程序，直到哪天找到自己的风格为止
 • 如果发现有人写代码的风格很喜欢，那就模仿他们的风格
"""


"""好的注释
 • 写注释时，描述清楚为什么要这样做。代码只会告诉你「这样实现」，而不会告诉你「为什么要这样实现」，
   而后者比前者更重要。
 • 为函数写文档注释时，用一两句话描述函数的用法，帮助其他代码使用者理解
 • 虽然注释是好东西，但太多注释就不见得是了。而且注释也是需要维护的，尽量让注释短小精悍、一语中的。
 • 如果对代码做了更改，记得检查并更新相关的注释，确认它们还是正确的。
"""
